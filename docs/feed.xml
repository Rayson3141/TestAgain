<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2022-11-08T14:17:35+08:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Home</title><subtitle>Build Jekyll site with the GitBook style.
</subtitle><author><name>Benson Hsu</name></author><entry><title type="html">AI - Constraint Satisfaction Problem</title><link href="http://0.0.0.0:4000/jekyll/2022-11-08-ai_csp.html" rel="alternate" type="text/html" title="AI - Constraint Satisfaction Problem" /><published>2022-11-08T00:00:00+08:00</published><updated>2022-11-08T00:00:00+08:00</updated><id>http://0.0.0.0:4000/jekyll/ai_csp</id><content type="html" xml:base="http://0.0.0.0:4000/jekyll/2022-11-08-ai_csp.html"><![CDATA[<blockquote>
  <p>Introduction to Artificial Intelligence Week 6 Notes</p>
</blockquote>

<p><em>Constraint Satisfaction Problem</em> 約束滿足問題其定義為一組物件，而這些物件需要滿足一定的限制或條件，而這個問題可能有很多的解。CSP 問題經常表現出高複雜性，需要結合啟發式搜尋和搜尋方法來在一個合理的時間內解決問題。</p>

<ul>
  <li>CSP related
    <ul>
      <li>Linear programming</li>
      <li>Nonlinear progaramming</li>
      <li>Numerical analysis</li>
    </ul>
  </li>
  <li>CSP application
    <ul>
      <li>Operations research</li>
      <li>Network flows</li>
      <li>optimization problems</li>
    </ul>
  </li>
</ul>

<p><strong>CSP Define</strong></p>

<p>CSP定義一個3-tuple(X, D, C), 其中</p>

<p>X = {X1, …, Xn} Finite set of variables.<br />
D = {D1, …, Dn} Nonempty domain of possible values for each variable.<br />
C = {C1, …, Cn} Finite set of constraints, Each constraint Ci limits the values that variables can take.</p>

<p><strong>Example</strong> (Map coloring to CSP)</p>

<ul>
  <li>我們將各區域定義成變數(Variables)
    <ul>
      <li>Variables : V={WA,NT,Q,NSW,V,SA,T}</li>
    </ul>
  </li>
  <li>每個變數的值域(Domains)
    <ul>
      <li>Domains : Di={red,green,blue}</li>
    </ul>
  </li>
  <li>將值賦予變數時的限制(Constraints)相鄰區域必須不同顏色, WA≠NT
    <ul>
      <li>(WA,NT)={(red,green),(red,blue),(green,red),…}</li>
    </ul>
  </li>
</ul>

<p><img src="https://slideplayer.com/slide/10791455/38/images/25/Minimum+remaining+values+%28MRV%29.jpg" alt="" height="50%" width="50%" /></p>]]></content><author><name>Benson Hsu</name></author><category term="Jekyll" /><category term="ai" /><category term="algorithm" /><summary type="html"><![CDATA[Introduction to Artificial Intelligence Week 6 Notes]]></summary></entry><entry><title type="html">Notes - UART</title><link href="http://0.0.0.0:4000/jekyll/2022-11-07-network_urat.html" rel="alternate" type="text/html" title="Notes - UART" /><published>2022-11-07T00:00:00+08:00</published><updated>2022-11-07T00:00:00+08:00</updated><id>http://0.0.0.0:4000/jekyll/network_urat</id><content type="html" xml:base="http://0.0.0.0:4000/jekyll/2022-11-07-network_urat.html"><![CDATA[<blockquote>
  <p>修網路實作的時候，給學弟妹講解 URAT 跟怎麼在 Arduino 上實作準備的一些教材</p>
</blockquote>

<h2 id="how-to-transfer-data-between-two-computers">How to transfer data between two computers?</h2>

<ul>
  <li>5 Volts logic</li>
  <li>Signal on transmission medium
    <ul>
      <li>Metal : Square wave &amp; Sine ware</li>
      <li>Optical fiber : Light square ware</li>
      <li>Wireless : Electromagnetic waves</li>
    </ul>
  </li>
</ul>

<p>5伏邏輯，怎麼傳遞資料？不同材料的波。</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Waveforms.svg/600px-Waveforms.svg.png" alt="" height="50%" width="50%" /></p>

<h2 id="the-universal-asynchronous-receivertransmitter-uart">The Universal Asynchronous Receiver/Transmitter (UART)</h2>

<ul>
  <li>In a world where technology can become obsolete very quickly
    <ul>
      <li>Still enjoys immense popularity.</li>
    </ul>
  </li>
</ul>

<p>UART這種簡單的通訊方式已經存在了幾十年，依然廣受歡迎。</p>

<h2 id="asynchronous-communication">Asynchronous communication</h2>

<p>異步通訊，所代表的是通訊中兩個byte之間的空隙是不固定的，而一個byte中的bit間隔是固定的。</p>

<h2 id="capabilities-and-characteristics">Capabilities and Characteristics</h2>

<p>a basic UART system provides robust, moderate-speed, full-duplex communication with only three signals: Tx (transmitted serial data), Rx (received serial data), and ground.</p>

<p>一個基本收送的UART傳輸，僅需要三個端口Tx, Rx, GND。</p>

<p>但在這之前的前提是Rx, Tx, 在相同的數據傳輸頻率。</p>

<p><img src="https://www.allaboutcircuits.com/uploads/articles/BBUART_diagram1_2.JPG" alt="" height="50%" width="50%" /></p>

<h2 id="key-terms">Key Terms</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Start bit</code>: The first bit of a one-byte UART transmission. It indicates that the data line is leaving its idle state. The idle state is typically logic high, so the start bit is logic low.
    <ul>
      <li>The start bit is an overhead bit; this means that it facilitates communication between receiver and transmitter but does not transfer meaningful data.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Stop bit</code>: The last bit of a one-byte UART transmission. Its logic level is the same as the signal’s idle state, i.e., logic high. This is another overhead bit.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Start bit</code>代表空閒的結束，Srart bit僅代表開始，不具實際數據。</p>

<p><code class="language-plaintext highlighter-rouge">Stop bit</code>代表傳輸結束，電位拉高等待下一次 Start。</p>

<p><img src="https://www.allaboutcircuits.com/uploads/articles/BBUART_diagram2_2.JPG" alt="" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Baud rate</code>: The approximate rate (in bits per second, or bps) at which data can be transferred.</li>
</ul>

<p>Example : 9600-baud system，即代表 1 bit 需要 1/(9600 bps) ≈ 104.2 µs，注意
不是實際上每秒傳送 9600 資料，實際上有開銷bit的消耗。</p>

<p><img src="https://www.allaboutcircuits.com/uploads/articles/BBUART_diagram3_2.JPG" alt="" height="50%" width="50%" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Parity bi</code>: An error-detection bit added to the end of the byte.
    <ul>
      <li>Odd or Even</li>
    </ul>
  </li>
</ul>

<p>如果要設定校正位，就多傳送一個Bit，並預先設計好Odd or Even。</p>

<p>如今天要傳送 00001110 而 even 即 校正為 1 這樣就會有偶數個 1。</p>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20201010/20120093cFTF1aC2Wb.png" alt="" height="50%" width="50%" /></p>

<h1 id="synchronizing-and-sampling">Synchronizing and Sampling</h1>

<p>the UART interface does not use a clock signal to synchronize the Tx and Rx devices. So how does the receiver know when to sample the transmitter’s data signal?</p>

<p>接收器的clock完全獨立於發送器clock。</p>

<p><img src="https://www.allaboutcircuits.com/uploads/articles/BBUART_diagram5_2.JPG" alt="" height="25%" width="25%" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>所以當今天要設計一個UART單方向傳輸，僅用一條線就可以完成。
可以想像接收端的狀態，用程式的表示方式會不會是以迴圈進行，當接到0時，
以預設的頻率收接下來的 8 bit，當電位拉高代表一次傳送的結束。等待下次開始。</p>

<p><a href="https://www.allaboutcircuits.com/technical-articles/back-to-basics-the-universal-asynchronous-receiver-transmitter-uart/">Reference</a> Back to Basics: The Universal Asynchronous Receiver/Transmitter (UART)</p>]]></content><author><name>Benson Hsu</name></author><category term="Jekyll" /><category term="communication" /><category term="protocol" /><summary type="html"><![CDATA[修網路實作的時候，給學弟妹講解 URAT 跟怎麼在 Arduino 上實作準備的一些教材]]></summary></entry><entry><title type="html">使用 Jekyll | Docker 建立 Github Pages</title><link href="http://0.0.0.0:4000/jekyll/2022-11-05-docker_jekyll.html" rel="alternate" type="text/html" title="使用 Jekyll | Docker 建立 Github Pages" /><published>2022-11-05T00:00:00+08:00</published><updated>2022-11-05T00:00:00+08:00</updated><id>http://0.0.0.0:4000/jekyll/docker_jekyll</id><content type="html" xml:base="http://0.0.0.0:4000/jekyll/2022-11-05-docker_jekyll.html"><![CDATA[<blockquote>
  <p>說明如何使用 Jekyll docker image 在不用熟悉 Ruby 與相關套件管理下，生成靜態文件。</p>
</blockquote>

<p>之前就想找一個能用 Markdown 寫筆記的地方，過去都是寫在 Github 的 Repositories 裡面但是檔案一多起來想整理也不方便，那就自己寫個 Blog 當作紀錄，
剛好就趁這個機會把這次的內容當作第一篇紀錄。</p>

<p>Jekyll 是一個用 Ruby 寫的簡單靜態網頁生成器，但是目前我幾乎都是用 Lab 的電腦做事，平時也是遠端到上面，所以很直覺的就想用 Docker 來處理環境，
之後跑腳本把生成好的文件在推上 Github 就可以做好一次更新了。</p>

<p>Required:</p>
<ul>
  <li>Docker image Jekyll/Jekyll</li>
  <li>Html, Javascript, CSS</li>
</ul>

<p>剛開始就先找個模板來用，<a href="http://jekyllthemes.org/">Jekyll themes</a>上就有很多可以用的模板來用，像我用的就是使用 GitBook 風格的模板，同時有搜尋功能之後文章的找尋也會比較方便。
找到模板之後去把他 forks 到自己的儲存庫，clone 下來就可以開始修改了。</p>

<h3 id="docker-jekyll">Docker Jekyll</h3>

<p>Jekyll 官方有一個 <a href="https://hub.docker.com/r/jekyll/jekyll/">Docker image</a> 所以拉這個 image 就可以了，裡面 Readme 教學寫得還蠻詳細的，只要把模板 volume 
到 container 裡面就可以執行 Jekyll 生成。第一次運行安裝套件等等會花一點時間，之後啟動容器速度就快很多了。
之後再簡單寫個 <a href="https://github.com/Hotshot824/Hotshot824.github.io/blob/master/build.sh">bash script</a> 這樣一個能快速生成的 Jekyll 環境就搭建完成了。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">jekyll build</code> 直接生成網頁</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll serve</code> 生成網頁後運行在 localhost:4000</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="se">\</span>
  <span class="nt">-v</span> <span class="nv">$WD</span>:/srv/jekyll:z <span class="se">\</span>
  <span class="nt">-v</span> /etc/localtime:/etc/localtime:ro<span class="se">\</span>
  <span class="nt">-p</span> 4000:4000 <span class="se">\</span>
  <span class="nt">--name</span> jekyll <span class="se">\</span>
  <span class="nt">-it</span> jekyll/jekyll <span class="se">\</span>
  jekyll serve 2&gt; /dev/null <span class="o">||</span> 
  docker start jekyll <span class="o">&amp;&amp;</span> docker attach jekyll<span class="p">;</span>
</code></pre></div></div>

<h3 id="customize">Customize</h3>

<p>之後就等文件生成好，同時記得設定 <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site">Github pages publishing source</a>, 把發布源改到生成的目錄。這樣 github.io 
的內容就直接指向這個目錄。然後就是一些自定義的小修改，這裡只要會一點 Js, Html 就可以搞定。
像我用的模板本來是舊的 post 優先，稍微改排序，預設字體，加入時間註記，這樣一個簡單的靜態網頁就完成了。</p>

<ul>
  <li>Change default font size: gitbook-plugin-fontsettings</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  "pluginsConfig": {
      "fontsettings": {
          "size": 1,
      }
  }
</code></pre></div></div>

<ul>
  <li>Add date in post: _layout/post.html</li>
  <li>change sort method: _includes/toc-date.htnl</li>
</ul>

<blockquote class="block-tip">
  <h5 id="note">NOTE</h5>

  <p>之後想到要修改的再更新吧，可能加入留言系統、標籤之類的，目前這樣的靜態網頁我就很滿意了。</p>
</blockquote>]]></content><author><name>Benson Hsu</name></author><category term="Jekyll" /><category term="github" /><category term="jekyll" /><category term="tool" /><summary type="html"><![CDATA[說明如何使用 Jekyll docker image 在不用熟悉 Ruby 與相關套件管理下，生成靜態文件。]]></summary></entry><entry><title type="html">Notes - Linux common command</title><link href="http://0.0.0.0:4000/jekyll/2022-11-05-linux_cmd.html" rel="alternate" type="text/html" title="Notes - Linux common command" /><published>2022-11-05T00:00:00+08:00</published><updated>2022-11-05T00:00:00+08:00</updated><id>http://0.0.0.0:4000/jekyll/linux_cmd</id><content type="html" xml:base="http://0.0.0.0:4000/jekyll/2022-11-05-linux_cmd.html"><![CDATA[<blockquote>
  <p>Notes to Linux Common Commands</p>
</blockquote>

<h3 id="vcgencmd">vcgencmd</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>如果要查詢硬體目前的時脈頻率，可以使用 measure_clock 參數：

vcgencmd measure_clock &lt;clock&gt;
其中的 &lt;clock&gt; 是指定要查詢的硬體，可用的選項有 arm、 core、 h264、 isp、 v3d、 uart、pwm、 emmc、 pixel、 vec、 hdmi、 dpi。

如果要查詢 CPU 的時脈頻率（也就是速度），可以執行

vcgencmd measure_clock arm
輸出為
frequency(45)=700000000

如果想查詢所有的硬體時脈頻率，可以使用簡單的 shell 指令稿：

for src in arm core h264 isp v3d uart pwm emmc pixel vec hdmi dpi ; do \
  echo -e "$src:\t$(vcgencmd measure_clock $src)" ; \
done
輸出為
arm:   frequency(45)=700000000
core:  frequency(1)=250000000
h264:  frequency(28)=250000000
isp:   frequency(42)=250000000
v3d:   frequency(43)=250000000
uart:  frequency(22)=3000000
pwm:   frequency(25)=0
emmc:  frequency(47)=250000000
pixel: frequency(29)=108000000
vec:   frequency(10)=0
hdmi:  frequency(9)=163682000
dpi:   frequency(4)=0

電壓（voltage）
如果要查詢硬體目前的工作電壓，可以使用 measure_volts 參數：

vcgencmd measure_volts &lt;id&gt;
其中 &lt;id&gt; 是指定要查詢的硬體，可用的選項有 core、 sdram_c、 sdram_i、 sdram_p。如果沒有指定 &lt;id&gt;，則預設為 core：

vcgencmd measure_volts
輸出為
volt=1.200V

查詢所有工作電壓的 shell 指令稿：

for id in core sdram_c sdram_i sdram_p ; do \
  echo -e "$id:\t$(vcgencmd measure_volts $id)" ; \
done
輸出為
core: volt=1.200V
sdram_c: volt=1.200V
sdram_i: volt=1.200V
sdram_p: volt=1.225V

溫度（temperature）
如果要查詢 BCM2835 SoC 目前的溫度，可以使用 measure_temp 參數：

vcgencmd measure_temp
輸出為
temp=43.3’C

Codec
若要查詢特定的 codec 有沒有啟用，可以使用 codec_enabled 參數：

vcgencmd codec_enabled &lt;codec&gt;
其中 &lt;codec&gt; 是指定要查詢的 codec，可用的選項有：H264、 MPG2、 WVC1、 MPG4、 MJPG、 WMV9。

查詢所有 codec 的指令稿：

for codec in H264 MPG2 WVC1 MPG4 MJPG WMV9 ; do \
  echo -e "$codec:\t$(vcgencmd codec_enabled $codec)" ; \
done
輸出為：
H264: H264=enabled
MPG2: MPG2=disabled
WVC1: WVC1=disabled
MPG4: MPG4=enabled
MJPG: MJPG=enabled
WMV9: WMV9=disabled

設定值（configurations）
get_config 參數可以列出目前系統中所有被設定的參數值：

vcgencmd get_config [config|int|str]
最後一個參數可用來指定要查詢的設定值名稱或是類型，例如查詢 temp_limit 的數值可以執行：

vcgencmd get_config temp_limit
輸出為
temp_limit=85

查詢所有數值資料的設定值可用

vcgencmd get_config int
輸出為
hdmi_force_hotplug=1
disable_overscan=1
overscan_left=24
overscan_right=24
overscan_top=16
overscan_bottom=16
program_serial_random=1
config_hdmi_boost=4
emmc_pll_core=1
hdmi_force_cec_address=65535
framebuffer_ignore_alpha=1
framebuffer_swap=1
disable_splash=1
temp_limit=85
force_pwm_open=1
pause_burst_frames=1
second_boot=1
avoid_fix_ts=1

記憶體配置
Raspberry Pi 的 CPU 與 GPU 是共用同同一個記憶體的，get_mem 參數可以查詢目前記憶體的配置狀態。查詢配置給 CPU 的記憶體大小：

vcgencmd get_mem arm
輸出為
arm=448M

查詢配置給 GPU 的記憶體大小：

vcgencmd get_mem gpu
輸出為
gpu=64M

韌體版本（firmware version）
查詢韌體版本可以使用

vcgencmd version
輸出為
Dec 19 2014 18:44:06
Copyright (c) 2012 Broadcom
version 5abd572e2ed1811283443387af09377b95501c50 (clean) (release)

OTP 記憶體
若要查詢 SoC 裡面 OTP（one time programmable）記憶體的內容，可以使用 otp_dump：

vcgencmd otp_dump

其中 28 與 30 代表硬體序號（serial）與修訂版（revision）的版本號碼，/proc/cpuinfo 中所顯示的序號與修訂版本號碼就是從這裡取得的，而 Model B/B+ 的網路卡 MAC 卡號也是根據硬體序號來產生的。

查看 vcgencmd 所有可用的參數
如果要查看 vcgencmd 指令所有可用的參數，可以執行

vcgencmd commands
輸出會類似這樣：
commands=”vcos, ap_output_control, ap_output_post_processing, vchi_test_init, vchi_test_exit, pm_set_policy, pm_get_status, pm_show_stats, pm_start_logging, pm_stop_logging, version, commands, set_vll_dir, led_control, set_backlight, set_logging, get_lcd_info, set_bus_arbiter_mode, cache_flush, otp_dump, test_result, codec_enabled, get_camera, get_mem, measure_clock, measure_volts, scaling_kernel, measure_temp, get_config, hdmi_ntsc_freqs, hdmi_adjust_clock, hdmi_status_show, hvs_update_fields, pwm_speedup, force_audio, hdmi_stream_channels, hdmi_channel_map, display_power, read_ring_osc, memtest, get_rsts, render_bar, disk_notify, inuse_notify, sus_suspend, sus_status, sus_is_enabled, sus_stop_test_thread, egl_platform_switch, mem_validate, mem_oom, mem_reloc_stats, file, vctest_memmap, vctest_start, vctest_stop, vctest_set, vctest_get”

這些就是所有可以使用的參數，這些參數會因為韌體版本不同而有差異。
</code></pre></div></div>

<h3 id="vboxmanage">vboxmanage</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Virtual box指令操作
手動相關指令說明:
 新建一個名為「New VM」的虛擬機器
VBoxManage createvm <span class="nt">-name</span> 「New VM」 <span class="nt">-register</span>

 設定「New VM」的記憶體是128MB並開啟acpi 設定第一開機碟為dvd 以及新增一個網路介面
VBoxManage modifyvm 「New VM」 <span class="nt">-memory</span> 「128MB」 <span class="nt">-acpi</span> on <span class="nt">-boot1</span> dvd <span class="nt">-nic1</span> intnet

 建立一個虛擬硬碟名為「newhd.vdi」  大小為 4000MB
VBoxManage createvdi <span class="nt">-filename</span> 「newhd.vdi」 <span class="nt">-size</span> 4000 <span class="nt">-register</span>

 將「New VM」的 hda 設定為「newhd.vdi」虛擬磁碟
VBoxManage modifyvm 「New VM」 <span class="nt">-hda</span> 「newhd.vdi」

 將在<span class="s2">"/home/file/iso.iso"</span>的ISO映像檔 設定到 名為 dvd的光碟映像檔庫
VBoxManage registerimage dvd /home/file/iso.iso

 設定名為「New VM」的 dvd裝置為 /home/file/iso.iso
VBoxManage modifyvm 「New VM」 <span class="nt">-dvd</span> /home/file/iso.iso

 設定「New VM」所使用的 VRDP 的連接Port為 3390
VBoxManage modifyvm 「New VM」 <span class="nt">-vrdpport</span> 3390

 啟動 VRDP
VBoxVRDP <span class="nt">-startvm</span> 「New VM」

<span class="nt">-----</span> List <span class="k">function

 </span>查詢目前vbox上有設定多少個vm
vboxmanage list vms

 查看支援的 OS Type
vboxmanage list ostypes

 查看運行中的 VM
vboxmanage list runningvms

 其它可以list的指令
vboxmanage list hostdvds
vboxmanage list hostinfo
vboxmanage list hddbackends
vboxmanage list systemproperties
vboxmanage list dhcpservers
vboxmanage list hdds
vboxmanage list dvds

 指令啟動vm
VBoxManage startvm <span class="s2">"VM name"</span> <span class="nt">--type</span> headless <span class="o">(</span>用背景啟動，不加上--type headless參數可能會有錯誤!!<span class="o">)</span>
</code></pre></div></div>

<h3 id="wifi-config">wifi config</h3>

<p><code class="language-plaintext highlighter-rouge">$ sudo vim /etc/netplan/50-cloud-init.yaml</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># This file is generated from information provided by the datasource.  Changes
# to it will not persist across an instance reboot.  To disable cloud-init's
# network configuration capabilities, write a file
# /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:
# network: {config: disabled}
network:
    ethernets:
        eth0:
            dhcp4: true
            optional: true
    version: 2
    wifis:
        wl0:
            optional: true
            access-points:
                "SSID-NAME-HERE":
                    password: "PASSWORD-HERE"
            dhcp4: true
</code></pre></div></div>]]></content><author><name>Benson Hsu</name></author><category term="Jekyll" /><category term="linux" /><category term="tool" /><summary type="html"><![CDATA[Notes to Linux Common Commands]]></summary></entry></feed>