{"/pages/about/": {
    "title": "About",
    "keywords": "Jekyll",
    "url": "/pages/about/",
    "body": "Hi, 我是 Benson 在這裡寫寫簡單的筆記，解決問題。主要寫 GO Python。 Benson’s Social Media: Email: shen485@gmail.com Github: Hotshot824"
  },"/pages/design/draft/": {
    "title": "Design Draft",
    "keywords": "Draft Jekyll",
    "url": "/pages/design/draft/",
    "body": "This is an draft page."
  },"/jekyll/2022-11-05-linux_cmd.html": {
    "title": "Linux: Common command",
    "keywords": "linux tool Jekyll",
    "url": "/jekyll/2022-11-05-linux_cmd.html",
    "body": "Notes to Linux Common Commands vboxmanage Virtual box指令操作 手動相關指令說明: 新建一個名為「New VM」的虛擬機器 VBoxManage createvm -name 「New VM」 -register 設定「New VM」的記憶體是128MB並開啟acpi 設定第一開機碟為dvd 以及新增一個網路介面 VBoxManage modifyvm 「New VM」 -memory 「128MB」 -acpi on -boot1 dvd -nic1 intnet 建立一個虛擬硬碟名為「newhd.vdi」 大小為 4000MB VBoxManage createvdi -filename 「newhd.vdi」 -size 4000 -register 將「New VM」的 hda 設定為「newhd.vdi」虛擬磁碟 VBoxManage modifyvm 「New VM」 -hda 「newhd.vdi」 將在\"/home/file/iso.iso\"的ISO映像檔 設定到 名為 dvd的光碟映像檔庫 VBoxManage registerimage dvd /home/file/iso.iso 設定名為「New VM」的 dvd裝置為 /home/file/iso.iso VBoxManage modifyvm 「New VM」 -dvd /home/file/iso.iso 設定「New VM」所使用的 VRDP 的連接Port為 3390 VBoxManage modifyvm 「New VM」 -vrdpport 3390 啟動 VRDP VBoxVRDP -startvm 「New VM」 ----- List function 查詢目前vbox上有設定多少個vm vboxmanage list vms 查看支援的 OS Type vboxmanage list ostypes 查看運行中的 VM vboxmanage list runningvms 其它可以list的指令 vboxmanage list hostdvds vboxmanage list hostinfo vboxmanage list hddbackends vboxmanage list systemproperties vboxmanage list dhcpservers vboxmanage list hdds vboxmanage list dvds 指令啟動vm VBoxManage startvm \"VM name\" --type headless (用背景啟動，不加上--type headless參數可能會有錯誤!!) wifi config $ sudo vim /etc/netplan/50-cloud-init.yaml # This file is generated from information provided by the datasource. Changes # to it will not persist across an instance reboot. To disable cloud-init's # network configuration capabilities, write a file # /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following: # network: {config: disabled} network: ethernets: eth0: dhcp4: true optional: true version: 2 wifis: wl0: optional: true access-points: \"SSID-NAME-HERE\": password: \"PASSWORD-HERE\" dhcp4: true"
  },"/jekyll/2022-11-05-docker_jekyll.html": {
    "title": "Github Pages: 使用 Jekyll | Docker 建立",
    "keywords": "github jekyll tool Jekyll",
    "url": "/jekyll/2022-11-05-docker_jekyll.html",
    "body": "之前就想找一個能用 Markdown 寫筆記的地方，之前都是寫在 Github 的 Repositories 裡面但是檔案一多起來想整理也不方便，那就自己寫個 Blog 當作紀錄， 剛好就趁這個機會把這次的內容當作第一篇紀錄。 Jekyll 是一個用 Ruby 寫的簡單靜態網頁生成器，但是目前我幾乎都是用 Lab 的電腦做事，平時也是遠端到上面，所以很直覺的就想用 Docker 來處理環境， 之後跑腳本把生成好的文件在推上 Github 就可以做好一次更新了。 Required: Docker image Jekyll/Jekyll Html, Javascript, CSS Jekyll themes 剛開始就先找個模板來用，Jekyll themes上就有很多可以用的模板來用，像我用的就是使用 GitBook 風格的模板，同時有搜尋功能之後文章的找尋也會比較方便。 找到模板之後去把他 forks 到自己的儲存庫，clone 下來就可以開始修改了。 Docker Jekyll Jekyll 官方有一個 Docker image 所以拉這個 image 就可以了，裡面 Readme 教學寫得還蠻詳細的，只要把模板 volume 到 container 裡面就可以執行 Jekyll 生成。第一次運行安裝套件等等會花一點時間，之後啟動容器速度就快很多了。 之後再簡單寫個 bash script 這樣一個能快速生成的 Jekyll 環境就搭建完成了。 jekyll build 直接生成網頁 jekyll serve 生成網頁後運行在 localhost:4000 docker run \\ -v $WD:/srv/jekyll:z \\ -v /etc/localtime:/etc/localtime:ro\\ -p 4000:4000 \\ --name jekyll \\ -it jekyll/jekyll \\ jekyll serve || docker start jekyll; Customize 之後就等文件生成好，同時記得設定 Github pages publishing source, 把發布源改到生成的目錄。這樣 github.io 的內容就直接指向這個目錄。然後就是一些自定義的小修改，這裡只要會一點 Js, Html 就可以搞定。 像我用的模板本來是舊的 post 優先，稍微改排序，預設字體，加入時間註記，這樣一個簡單的靜態網頁就完成了。 Change default font size: gitbook-plugin-fontsettings \"pluginsConfig\": { \"fontsettings\": { \"size\": 1, } } Add date in post: _layout/post.html change sort method: _includes/toc-date.htnl NOTE 之後想到要修改的再更新吧，可能加入留言系統、標籤之類的，目前這樣的靜態網頁我就很滿意了。"
  }}
